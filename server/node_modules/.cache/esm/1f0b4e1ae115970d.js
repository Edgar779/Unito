let express,cors,morgan,helmet,methodOverride,bodyParser,routes,mainConfig,favicon,path;_e11‍.x([["default",()=>_e11‍.o]]);_e11‍.w("express",[["default",["express"],function(v){express=v}]]);_e11‍.w("cors",[["default",["cors"],function(v){cors=v}]]);_e11‍.w("morgan",[["default",["morgan"],function(v){morgan=v}]]);_e11‍.w("helmet",[["default",["helmet"],function(v){helmet=v}]]);_e11‍.w("method-override",[["default",["methodOverride"],function(v){methodOverride=v}]]);_e11‍.w("body-parser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_e11‍.w("./api/index.js",[["default",["routes"],function(v){routes=v}]]);_e11‍.w("./env/index.js",[["default",["mainConfig"],function(v){mainConfig=v}]]);_e11‍.w("serve-favicon",[["default",["favicon"],function(v){favicon=v}]]);_e11‍.w("path",[["default",["path"],function(v){path=v}]]);






  

  

  
  
  
  class Server {
    app = express();

    constructor() {
      this.config();
      this.routes();
    }

    config () {
      
      // this.app.use(favicon(path.join(__dirname, '../../client/my-app/public', 'favicon.ico')))

      this.app.use(function (req, res, next) {
        res.header("Access-Control-Allow-Origin", "*");
        res.header("Access-Control-Allow-Headers", "X-Requested-With");
        next();
      });
      this.app.use(bodyParser.json({limit:'50mb'})); 
      this.app.use(bodyParser.urlencoded({limit: '50mb', extended: true, parameterLimit: 1000000}));
      /** Enabling cross-origin resource sharing */
      this.app.use(cors());
      // this.app.use('/auth', require('./api/auth'));
      /** Enabling middleware that parses json */
      this.app.use(express.json());
      /** Enabling middleware that parses urlencoded bodies */
      this.app.use(express.urlencoded({ extended: false }));
      /** Enabling method-override */
      this.app.use(methodOverride());
      /** Enabling setting various HTTP headers for security */
      this.app.use(helmet());
      /** Logging api calls */
      if (mainConfig.NODE_ENV !== 'test') this.app.use(morgan('dev'));
    
    }

    routes () {
      this.app.get('/favicon.ico', (req, res) => res.status(204));

      // this.app.use("/swagger", swaggerUi.serve, swaggerUi.setup(swaggerDocument));

      

      this.app.use('/api', routes);

    }
  }

  _e11‍.d(new Server().app);